"use strict";(self.webpackChunkreact_optics_docs=self.webpackChunkreact_optics_docs||[]).push([[515],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return t?a.createElement(k,i(i({ref:n},m),{},{components:t})):a.createElement(k,i({ref:n},m))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1792:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={title:"map/reduce",sidebar_position:2},i=void 0,l={unversionedId:"Guides/map_reduce",id:"Guides/map_reduce",title:"map/reduce",description:"Besides total and partial an optic can be of a third type: mapped.",source:"@site/docs/Guides/map_reduce.md",sourceDirName:"Guides",slug:"/Guides/map_reduce",permalink:"/docs/Guides/map_reduce",draft:!1,editUrl:"https://github.com/TSOptics/react-optics-docs/edit/master/docs/Guides/map_reduce.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"map/reduce",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Total vs partial",permalink:"/docs/Guides/total_partial"},next:{title:"Comparisons",permalink:"/docs/Guides/comparisons"}},s={},p=[{value:"Derive from mapped optic",id:"derive-from-mapped-optic",level:2},{value:"Mapped optic specfic methods",id:"mapped-optic-specfic-methods",level:3},{value:"Chain mapped optics",id:"chain-mapped-optics",level:2}],m={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Besides total and partial an optic can be of a third type: ",(0,r.kt)("strong",{parentName:"p"},"mapped"),".",(0,r.kt)("br",{parentName:"p"}),"\n","A mapped optic is focused on multiple elements. When you read from a mapped optic you get all focused elements, and when you set a new value it is applied to all elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onNumbers = createState([4, 8, 9, 3, 7]).map();\n// onNumbers: Optic<number, mapped>\n\nonNumbers.get(); // [14, 28, 79, 34, 57]\n\nonNumbers.set((n) => n + 1);\nonNumbers.get(); // [15, 29, 80, 35, 58]\n\nonNumbers.set(0);\nonNumbers.get(); // [0, 0, 0, 0, 0]\n")),(0,r.kt)("p",null,"You can get a mapped optic from any optic focused on an array by calling ",(0,r.kt)("inlineCode",{parentName:"p"},".map()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onClientValidation = createState<Record<string, boolean>>({\n  Giuseppe: false,\n  GianLuigi: true,\n  Alessandra: false,\n});\n\nconst onValidation = onClientValidation.values().map(); // Optic<boolean, mapped>\nonValidation.get(); // [false, true, false]\n\nonValidation.set(true);\nonClientValidation.get(); // { Giuseppe: true, GianLuigi: true, Alessandra: true }\n")),(0,r.kt)("h2",{id:"derive-from-mapped-optic"},"Derive from mapped optic"),(0,r.kt)("p",null,"Once you have a mapped optic you can continue to focus further on the elements, which will get you a new mapped optic:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const onNationalParks = createState([\n  { name: "Denali", squareKilometers: 19185.8 },\n  { name: "Redwood", squareKilometers: 562.5 },\n  { name: "Yellowstone", squareKilometers: 8983.2 },\n]).map(); // Optic<{ name: string; squareKilometers: number }, mapped>\n\nconst onAreas = onNationalParks.squareKilometers; // Optic<number, mapped>\n\nonAreas.get(); // [19185.8, 562.5, 8983.2]\n')),(0,r.kt)("p",null,"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"onAreas")," focuses on the squareKilometers property of each element focused by ",(0,r.kt)("inlineCode",{parentName:"p"},"onNationalParks"),"."),(0,r.kt)("h3",{id:"mapped-optic-specfic-methods"},"Mapped optic specfic methods"),(0,r.kt)("p",null,"Mapped optics also have additional methods not found on total or partial optics. They resemble those from Javascript's ",(0,r.kt)("inlineCode",{parentName:"p"},"Array")," type like ",(0,r.kt)("inlineCode",{parentName:"p"},"sort"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"slice"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filter"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onBigNationalParks = onNationalParks.filter(\n  (park) => park.squareKilometers > 10000\n);\n// onBigNationalParks: Optic<{ name: string; squareKilometers: number }, mapped>\n\nonBigNationalParks.get(); // [{ name: 'Denali', squareKilometers: 19185.8 }]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sort"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onNationalParksByArea = onNationalParks.sort(\n  (a, b) => a.squareKilometers - b.squareKilometers\n);\n// onNationalParksByArea: Optic<{ name: string; squareKilometers: number }, mapped>\n\nconst nationalParksByArea = onNationalParksByArea.get();\n// nationalParksByArea = [\n//     { name: 'Redwood', squareKilometers: 562.5 },\n//     { name: 'Yellowstone', squareKilometers: 8983.2 },\n//     { name: 'Denali', squareKilometers: 19185.8 }\n// ];\n")),(0,r.kt)("p",null,"They also have methods to focus back on a single element, giving you a partial optic."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"findFirst"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onFirstBelow10000 = onNationalParks.findFirst(\n  (park) => park.squareKilometers < 10000\n); // Optic<{ name: string; squareKilometers: number }, partial>\n\nonFirstBelow10000.get(); // { name: 'Redwood', squareKilometers: 562.5 }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"min")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"max"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const maxParkByArea = onNationalParks.max((park) => park.squareKilometers);\n// maxParkByArea: Optic<{ name: string; squareKilometers: number }, partial>\n\nconst minParkByArea = onNationalParks.min((park) => park.squareKilometers);\n// minParkByArea: Optic<{ name: string; squareKilometers: number }, partial>\n\nmaxParkByArea.get(); // { name: 'Denali', squareKilometers: 19185.8 }\nminParkByArea.get(); // { name: 'Redwood', squareKilometers: 562.5 }\n")),(0,r.kt)("h2",{id:"chain-mapped-optics"},"Chain mapped optics"),(0,r.kt)("p",null,"You can keep calling ",(0,r.kt)("inlineCode",{parentName:"p"},".map()")," as long the focused value is an array."),(0,r.kt)("p",null,"You will get a flattened representation of your data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onArrayOfArray = createState([[7, 98], [56, 4, 2], [300]]);\n// onArrayOfArray: Optic<number[][]>\n\nconst onNumbers = onArrayOfArray.map().map();\n// onNumbers: Optic<number, mapped>\n\nonNumbers.get(); // [7, 98, 56, 4, 2, 300]\n\nonNumbers.set(42);\nonArrayOfArray.get(); // [[42, 42], [42, 42, 42], [42]]\n")))}u.isMDXComponent=!0}}]);