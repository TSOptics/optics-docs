"use strict";(self.webpackChunkoptics_docs=self.webpackChunkoptics_docs||[]).push([[9882],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1842:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"Total/Partial",sidebar_position:1},i="Total and partial optics",p={unversionedId:"Guides/total_partial",id:"Guides/total_partial",title:"Total/Partial",description:"An optic can either be total which means it's focused on one value, or partial that is focused on zero or one value.",source:"@site/docs/Guides/total_partial.md",sourceDirName:"Guides",slug:"/Guides/total_partial",permalink:"/optics-docs/docs/Guides/total_partial",draft:!1,editUrl:"https://github.com/TSOptics/optics-docs/edit/master/docs/Guides/total_partial.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Total/Partial",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Core Concepts",permalink:"/optics-docs/docs/Introduction/core-concepts"},next:{title:"Map/Reduce",permalink:"/optics-docs/docs/Guides/map_reduce"}},l={},s=[{value:"Partial optics",id:"partial-optics",level:2},{value:"Type relations",id:"type-relations",level:3}],c={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"total-and-partial-optics"},"Total and partial optics"),(0,r.kt)("p",null,"An optic can either be ",(0,r.kt)("inlineCode",{parentName:"p"},"total")," which means it's focused on ",(0,r.kt)("strong",{parentName:"p"},"one value"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"partial")," that is focused on ",(0,r.kt)("strong",{parentName:"p"},"zero or one value"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createState")," returns a total optic, it will never fail to focus on the root state:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onUser = createState({ name: \"Vincent\" });\n// onName: Optic<{ name: string }, total>\n//                                 ^^^^^\n\nconst name = onUser.name.get();\n// name: string = 'Vincent'\n")),(0,r.kt)("admonition",{title:"total is the default",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When you declare an optic without specifying the second type parameter then it defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"total"),":",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"Optic<string>")," === ",(0,r.kt)("inlineCode",{parentName:"p"},"Optic<string, total>"))),(0,r.kt)("h2",{id:"partial-optics"},"Partial optics"),(0,r.kt)("p",null,"A partial optic focuses on a value that might not exist."),(0,r.kt)("p",null,"As an example let's create users with an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"contact")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const initialUsers = [\n  { name: "Vincent", contact: { phone: "999-999-999" } },\n  { name: "Gabin" },\n];\n// initialUsers: { name: string; contact?: { phone: string } }[]\n\nconst onUsers = createState(initialUsers);\n')),(0,r.kt)("p",null,"Here the ",(0,r.kt)("inlineCode",{parentName:"p"},"contact")," property is inferred as optional because it's not present for all users.",(0,r.kt)("br",{parentName:"p"}),"\n","After that every optic we derive from ",(0,r.kt)("inlineCode",{parentName:"p"},"contact")," will be partial because the value it is focused on might not exist:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onFirstUserPhone = onUsers[0].contact.phone;\n// onFirstUserPhone: Optic<string, partial>\n//                                 ^^^^^^^\n\nconst onSecondUserPhone = onUsers[1].contact.phone;\n// onSecondUserPhone: Optic<string, partial>\n//                                  ^^^^^^^\n")),(0,r.kt)("p",null,"If an optic can't find the focused value it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),", that means in our case the value returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," is typed as ",(0,r.kt)("inlineCode",{parentName:"p"},"string | undefined"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const vincentsPhone = onFirstUserPhone.get();\n// vincentsPhone: string | undefined === '999-999-999'\n\nconst gabinsPhone = onSecondUserPhone.get();\n// gabinsPhone: string | undefined === undefined\n")),(0,r.kt)("p",null,"When trying to update a value that a partial fails to reach then it will simply no-op:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'onSecondUserPhone.set("888-888-888");\nonSecondUserPhone.get(); // undefined\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"On a plain javascript object, if you have to use the ",(0,r.kt)("strong",{parentName:"p"},"optional chaining operator")," ",(0,r.kt)("inlineCode",{parentName:"p"},"?.")," on the path to a property,\nthen using the same path on the optic means that you'll get a partial optic (no need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"?.")," operator though)."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"initialUsers[0].contact?.phone;\n//                     ^^\n// string | undefined\n\nonUsers[0].contact.phone;\n// Optic<string, partial>\n"))),(0,r.kt)("p",null,"Deriving optics from properties of optional objects is not the only way to get partial optics.",(0,r.kt)("br",{parentName:"p"}),"\n","For exemple with an optic focused on an array, the ",(0,r.kt)("inlineCode",{parentName:"p"},"findFirst")," method returns a partial optic because no element of the array might match the predicate.",(0,r.kt)("br",{parentName:"p"}),"\n","Or again the ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," method returns a partial optic because the condition might not be met by the focused value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onNumber = createState(42);\n// onNumber: Optic<number>\n\nconst onEvenNumber = onNumber.if((n) => n % 2 === 0);\n// onEvenNumber: Optic<number, partial>\n\nonEvenNumber.get(); // 42\n\nonEvenNumber.set((n) => n + 1);\n\nonNumber.get(); // 43\nonEvenNumber.get(); // undefined\n")),(0,r.kt)("h3",{id:"type-relations"},"Type relations"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"total")," is a subtype of ",(0,r.kt)("inlineCode",{parentName:"p"},"partial"),", meaning we can assign a total optic to a partial one (widening the type):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onNumber = createState(42);\n// onNumber: Optic<number, total>\n//                         ^^^^^\nconst onNumberPartial: Optic<number, partial> = onNumber; // \u2705 allowed\n")),(0,r.kt)("p",null,"However the reverse is not true, assigning a partial optic to a total one (narrowing the type) fails to compile:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onEvenNumber = createState(42).if((n) => n % 2 === 0);\n// onEvenNumber: Optic<number, partial>\n\nconst onNumberTotal: Optic<number, total> = onEvenNumber; // \u274c type error\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"You can do that in a safe way by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," method.",(0,r.kt)("br",{parentName:"p"}),"\n","It will fallback to the default value you provided if the partial optic doesn't return a value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const onEvenNumberTotal = onEvenNumber.default(0);\n// onEvenNumberTotal: Optic<number, total>\n\nonNumber.set(42);\nonEvenNumberTotal.get(); // 42\n\nonNumber.set(43);\nonEvenNumberTotal.get(); // 0\n")))}m.isMDXComponent=!0}}]);