"use strict";(self.webpackChunkreact_optics_docs=self.webpackChunkreact_optics_docs||[]).push([[8258],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},527:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],p={title:"Mapped optics",sidebar_position:2},s=void 0,l={unversionedId:"Guides/mapped_optics",id:"Guides/mapped_optics",title:"Mapped optics",description:"Besides total and partial an optic can be of a third type: mapped.",source:"@site/docs/Guides/mapped_optics.md",sourceDirName:"Guides",slug:"/Guides/mapped_optics",permalink:"/docs/Guides/mapped_optics",draft:!1,editUrl:"https://github.com/TSOptics/react-optics-docs/edit/master/docs/Guides/mapped_optics.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Mapped optics",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Total vs partial",permalink:"/docs/Guides/total_partial"},next:{title:"BaseOptic",permalink:"/docs/Guides/base_optic"}},c={},u=[{value:"Derive from mapped optic",id:"derive-from-mapped-optic",level:2},{value:"Mapped optic specfic methods",id:"mapped-optic-specfic-methods",level:3},{value:"Chain mapped optics",id:"chain-mapped-optics",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Besides total and partial an optic can be of a third type: ",(0,o.kt)("strong",{parentName:"p"},"mapped"),".",(0,o.kt)("br",{parentName:"p"}),"\n","A mapped optic is focused on multiple elements. When you read from a mapped optic you get all focused elements, and when you set a new value it is applied to all elements."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onNumbers = createStore([4, 8, 9, 3, 7]).map();\n// onNumbers: Optic<number, mapped>\n\nonNumbers.getState(); // [14, 28, 79, 34, 57]\n\nonNumbers.setState((n) => n + 1);\nonNumbers.getState(); // [15, 29, 80, 35, 58]\n\nonNumbers.setState(0);\nonNumbers.getState(); // [0, 0, 0, 0, 0]\n")),(0,o.kt)("p",null,"You can get a mapped optic from an optic focused on an array (by calling ",(0,o.kt)("inlineCode",{parentName:"p"},".map()"),"), or from an optic focused on a record (by calling ",(0,o.kt)("inlineCode",{parentName:"p"},".entries()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},".values()"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onClientValidation = createStore<Record<string, boolean>>({\n    Giuseppe: false,\n    GianLuigi: true,\n    Alessandra: false\n});\n\nconst onValidation = onClientValidation.values(); // Optic<boolean, mapped>\nonValidation.getState(); // [false, true, false]\n\nonValidation.setState(true);\nonClientValidation.getState(); // { Giuseppe: true, GianLuigi: true, Alessandra: true }\n")),(0,o.kt)("h2",{id:"derive-from-mapped-optic"},"Derive from mapped optic"),(0,o.kt)("p",null,"Once you have a mapped optic you can continue to focus further on the elements, which will get you a new mapped optic:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onNationalParks = createStore([\n    { name: 'Denali', squareKilometers: 19185.8 },\n    { name: 'Redwood', squareKilometers: 562.5 },\n    { name: 'Yellowstone', squareKilometers: 8983.2 }\n]).map(); // Optic<{ name: string; squareKilometers: number }, mapped>\n\nconst onAreas = onNationalParks.focus('squareKilometers'); // Optic<number, mapped>\n\nonAreas.getState(); // [19185.8, 562.5, 8983.2]\n")),(0,o.kt)("p",null,"Here ",(0,o.kt)("inlineCode",{parentName:"p"},"onAreas")," focuses on the squareKilometers property of each element focused by ",(0,o.kt)("inlineCode",{parentName:"p"},"onNationalParks"),"."),(0,o.kt)("h3",{id:"mapped-optic-specfic-methods"},"Mapped optic specfic methods"),(0,o.kt)("p",null,"Mapped optics also have additional methods not found on total or partial optics. They resemble those from Javascript's ",(0,o.kt)("inlineCode",{parentName:"p"},"Array")," type like ",(0,o.kt)("inlineCode",{parentName:"p"},"sort"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"filter")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"slice"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"filter"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onBigNationalParks = onNationalParks.filter(\n    (park) => park.squareKilometers > 10000\n);\n// onBigNationalParks: Optic<{ name: string; squareKilometers: number }, mapped>\n\nonBigNationalParks.getState(); // [{ name: 'Denali', squareKilometers: 19185.8 }]\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sort"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onNationalParksByArea = onNationalParks.sort(\n    (a, b) => a.squareKilometers - b.squareKilometers\n);\n// onNationalParksByArea: Optic<{ name: string; squareKilometers: number }, mapped>\n\nconst nationalParksByArea = onNationalParksByArea.getState();\n// nationalParksByArea = [\n//     { name: 'Redwood', squareKilometers: 562.5 },\n//     { name: 'Yellowstone', squareKilometers: 8983.2 },\n//     { name: 'Denali', squareKilometers: 19185.8 }\n// ];\n")),(0,o.kt)("p",null,"They also have methods to focus back on a single element, giving you a partial optic."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"findFirst"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onFirstBelow10000 = onNationalParks.findFirst(\n    (park) => park.squareKilometers < 10000\n); // Optic<{ name: string; squareKilometers: number }, partial>\n\nonFirstBelow10000.getState(); // { name: 'Redwood', squareKilometers: 562.5 }\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"min")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"max"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const maxParkByArea = onNationalParks.max((park) => park.squareKilometers);\n// maxParkByArea: Optic<{ name: string; squareKilometers: number }, partial>\n\nconst minParkByArea = onNationalParks.min((park) => park.squareKilometers);\n// minParkByArea: Optic<{ name: string; squareKilometers: number }, partial>\n\nmaxParkByArea.getState(); // { name: 'Denali', squareKilometers: 19185.8 }\nminParkByArea.getState(); // { name: 'Redwood', squareKilometers: 562.5 }\n")),(0,o.kt)("h2",{id:"chain-mapped-optics"},"Chain mapped optics"),(0,o.kt)("p",null,"You can keep calling ",(0,o.kt)("inlineCode",{parentName:"p"},".map()")," as long the focused value is an array, or you can keep calling ",(0,o.kt)("inlineCode",{parentName:"p"},".values()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},".entries()")," as long as the focused value is a record."),(0,o.kt)("p",null,"You will get a flattened representation of your data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onArrayOfArray = createStore([[7, 98], [56, 4, 2], [300]]);\n// onArrayOfArray: Optic<number[][]>\n\nconst onNumbers = onArrayOfArray.map().map();\n// onNumbers: Optic<number, mapped>\n\nonNumbers.getState(); // [7, 98, 56, 4, 2, 300]\n\nonNumbers.setState(42);\nonArrayOfArray.getState(); // [[42, 42], [42, 42, 42], [42]]\n")))}d.isMDXComponent=!0}}]);