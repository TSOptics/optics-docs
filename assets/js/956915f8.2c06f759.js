"use strict";(self.webpackChunkreact_optics_docs=self.webpackChunkreact_optics_docs||[]).push([[4134],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),l=u(n),f=o,m=l["".concat(s,".").concat(f)]||l[f]||d[f]||c;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[l]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<c;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const c={sidebar_position:2,title:"useOptic()"},a="useOptic(optic): [value, setValue]",i={unversionedId:"API/React/useOptic()",id:"API/React/useOptic()",title:"useOptic()",description:"---",source:"@site/docs/API/React/useOptic().md",sourceDirName:"API/React",slug:"/API/React/useOptic()",permalink:"/docs/API/React/useOptic()",draft:!1,editUrl:"https://github.com/TSOptics/react-optics-docs/edit/master/docs/API/React/useOptic().md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"useOptic()"},sidebar:"tutorialSidebar",previous:{title:"createState()",permalink:"/docs/API/createState()"},next:{title:"useOpticReducer()",permalink:"/docs/API/React/useOpticReducer()"}},s={},u=[{value:"Example:",id:"example",level:3}],p={toc:u},l="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"useopticoptic-value-setvalue"},"useOptic(optic): ","[value, setValue]"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function useOptic<T>(optic: Optic<T>): [T, Dispatch<SetStateAction<T>>];\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"This hook let's you read and modify the slice of store focused by an optic.",(0,o.kt)("br",{parentName:"p"}),"\n","Just like React ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," it returns the value and a setter to change it."),(0,o.kt)("p",null,"The component will rerender each time the focused value changes."),(0,o.kt)("h3",{id:"example"},"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useOptic } from "react-optics";\n\nconst onCount = createState(42);\n\nconst MyCount = () => {\n  const [count, setCount] = useOptic(onCount);\n\n  // set new count value\n  setCount(100);\n\n  // pass an updater function to change count based on the previous value\n  setCount((prev) => prev + 1);\n\n  return <div>count: {count}</div>;\n};\n')))}d.isMDXComponent=!0}}]);