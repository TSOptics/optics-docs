"use strict";(self.webpackChunkreact_optics_docs=self.webpackChunkreact_optics_docs||[]).push([[3570],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,c=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=p(n),m=c,f=l["".concat(s,".").concat(m)]||l[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[l]="string"==typeof e?e:c,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),c=(n(7294),n(3905));const a={sidebar_position:3,title:"useOpticReducer()"},o="useOpticReducer(optic, reducer): [value, dispatch]",i={unversionedId:"API/React/useOpticReducer()",id:"API/React/useOpticReducer()",title:"useOpticReducer()",description:"---",source:"@site/docs/API/React/useOpticReducer().md",sourceDirName:"API/React",slug:"/API/React/useOpticReducer()",permalink:"/docs/API/React/useOpticReducer()",draft:!1,editUrl:"https://github.com/TSOptics/react-optics-docs/edit/master/docs/API/React/useOpticReducer().md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"useOpticReducer()"},sidebar:"tutorialSidebar",previous:{title:"useOptic()",permalink:"/docs/API/React/useOptic()"},next:{title:"useKeyedOptics()",permalink:"/docs/API/React/useKeyedOptics()"}},s={},p=[{value:"Example:",id:"example",level:3}],u={toc:p},l="wrapper";function d(e){let{components:t,...n}=e;return(0,c.kt)(l,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"useopticreduceroptic-reducer-value-dispatch"},"useOpticReducer(optic, reducer): ","[value, dispatch]"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-tsx"},"function useOpticReducer<T, TOpticType, Action>(\n  onState: Optic<T, TOpticType>,\n  reducer: (state: T, action: Action, onState: Optic<T, total, T>) => T\n): [T, Dispatch<Action>];\n")),(0,c.kt)("hr",null),(0,c.kt)("p",null,"This hook allows you to manage the slice of store focused on by the optic with a reducer.\nAs arguments it takes an optic and a reducer function while it returns the focused value as well as a dispatch function."),(0,c.kt)("p",null,"It works pretty much just like React ",(0,c.kt)("inlineCode",{parentName:"p"},"useReducer"),", you use the dispatch function to send actions that the reducer will use to compute the next state.",(0,c.kt)("br",{parentName:"p"}),"\n","The only difference is that you can use a reducer that takes a pure optic as third argument. With it you can derive new optics to handle immutable updates inside of the reducer with the ",(0,c.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,c.kt)("inlineCode",{parentName:"p"},"set")," methods."),(0,c.kt)("h3",{id:"example"},"Example:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-tsx"},'import { createState, useReducer } from "react-optics";\n\nconst initialCounter = { value: 0, step: 1 };\nconst onCounter = createState(initialCounter);\n\nconst reducer = (state, action, onState) => {\n  const onValue = onState.value;\n  const onStep = onState.step;\n  switch (action.type) {\n    case "increment":\n      // equivalent to: return { ...state, value: state.value + state.step };\n      return onValue.set((prev) => prev + state.step, state);\n    case "decrement":\n      return onValue.set((prev) => prev - state.step, state);\n    case "changeStep":\n      return onStep.set(action.step, state);\n    case "reset":\n      return initialCounter;\n  }\n};\n\nconst MyCounterComponent = () => {\n  const [counter, dispatch] = useOpticReducer(onCounter, reducer);\n\n  useEffect(() => {\n    dispatch({ type: "increment" });\n    dispatch({ type: "changeStep", step: 10 });\n    dispatch({ type: "increment" });\n    dispatch({ type: "changeStep", step: 3 });\n    dispatch({ type: "decrement" });\n    // counter.value will be 8\n  }, [dispatch]);\n\n  // ...\n};\n')))}d.isMDXComponent=!0}}]);