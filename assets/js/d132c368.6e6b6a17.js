"use strict";(self.webpackChunkoptics_docs=self.webpackChunkoptics_docs||[]).push([[3272],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,y=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(y,s(s({ref:t},l),{},{components:n})):r.createElement(y,s({ref:t},l))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:o,s[1]=a;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7684:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={title:".entries()",sidebar_position:9},s=".entries(): Optic",a={unversionedId:"API/methods/object/entries()",id:"API/methods/object/entries()",title:".entries()",description:"---",source:"@site/docs/API/methods/object/entries().md",sourceDirName:"API/methods/object",slug:"/API/methods/object/entries()",permalink:"/optics-docs/docs/API/methods/object/entries()",draft:!1,editUrl:"https://github.com/TSOptics/optics-docs/edit/master/docs/API/methods/object/entries().md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:".entries()",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:".min()",permalink:"/optics-docs/docs/API/methods/array/min()"},next:{title:".values()",permalink:"/optics-docs/docs/API/methods/object/values()"}},c={},p=[{value:"Example:",id:"example",level:3}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"entries-optic"},".entries(): Optic"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Optic<A extends Record<string, infer Value>>.entries: () => Optic<\n    [key: string, value: Value],\n    mapped\n>;\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Analogous to ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/docs/web/javascript/reference/global_objects/object/entries"},"Object.entries"),", this method returns a ",(0,o.kt)("a",{parentName:"p",href:"../../guides/mapped%20optics()"},"mapped optic")," focused on the object's ",(0,o.kt)("inlineCode",{parentName:"p"},"[key, value]")," pairs.",(0,o.kt)("br",{parentName:"p"}),"\n","Its purpose is to map over a record, allowing you to change both keys and values."),(0,o.kt)("h3",{id:"example"},"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const onOlympicCities = createState<Record<string, number>>({\n  paris: 2,\n  london: 3,\n  losAngeles: 2,\n  tokyo: 2,\n});\n\nconst onEntries = onOlympicCities.entries();\n// onEntries: Optic<[key: string, value: number], mapped>;\n\nconst [entries, setEntries] = useOptic(onEntries);\n// entries = [["paris", 2], ["london", 3], ["losAngeles", 2], ["tokyo", 2]];\n\nsetEntries(([city, olympiads]) => [\n  city.toUpperCase,\n  city === "paris" || city === "losAngeles" ? olympiads + 1 : olympiads,\n]);\n// onOlympicCities.get() = { PARIS: 3, LONDON: 3, LOSANGELES: 3, TOKYO: 2 };\n')))}d.isMDXComponent=!0}}]);