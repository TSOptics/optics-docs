"use strict";(self.webpackChunkreact_optics_docs=self.webpackChunkreact_optics_docs||[]).push([[7345],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,d=u["".concat(p,".").concat(m)]||u[m]||f[m]||i;return n?r.createElement(d,a(a({ref:t},l),{},{components:n})):r.createElement(d,a({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const i={title:".filter()",sidebar_position:13},a=".filter(predicate): Optic",c={unversionedId:"API/methods/filter()",id:"API/methods/filter()",title:".filter()",description:"Analogous to Array.filter, this method returns a mapped optic focused on the elements of the original mapped optic that satisfy the predicate.",source:"@site/docs/API/methods/filter().md",sourceDirName:"API/methods",slug:"/API/methods/filter()",permalink:"/docs/API/methods/filter()",draft:!1,editUrl:"https://github.com/TSOptics/react-optics-docs/edit/master/docs/API/methods/filter().md",tags:[],version:"current",sidebarPosition:13,frontMatter:{title:".filter()",sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:".atIndex()",permalink:"/docs/API/methods/atIndex()"},next:{title:".slice()",permalink:"/docs/API/methods/slice()"}},p={},s=[{value:"Example:",id:"example",level:3}],l={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"filterpredicate-optic"},".filter(predicate): Optic"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Optic<A, mapped>.filter: (predicate: (a: A) => boolean) => Optic<A, mapped>;\n")),(0,o.kt)("p",null,"Analogous to ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"},"Array.filter"),", this method returns a mapped optic focused on the elements of the original mapped optic that satisfy the predicate."),(0,o.kt)("h3",{id:"example"},"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onCountries = createStore([\n    { name: 'Spain', continent: 'Europe' },\n    { name: 'S\xe9n\xe9gal', continent: 'Africa' },\n    { name: 'Columbia', continent: 'South America' },\n    { name: 'Gabon', continent: 'Africa' }\n]);\n// onCountries: Optic<{ name: string; continent: string }>;\n\nconst onAfricanCountries = onCountries\n    .map()\n    .filter((country) => country.continent === 'Africa');\n// onAfricanCountries: Optic<{ name: string; continent: string }, mapped>\n\nconst [africanCountries, setAfricanCountries] = useOptic(onAfricanCountries);\n// africanCountries = [\n//    { name: 'S\xe9n\xe9gal', continent: 'Africa' },\n//    { name: 'Gabon', continent: 'Africa' }\n// ];\n")))}u.isMDXComponent=!0}}]);