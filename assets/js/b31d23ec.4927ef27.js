"use strict";(self.webpackChunkreact_optics_docs=self.webpackChunkreact_optics_docs||[]).push([[2069],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={title:".get()",sidebar_position:16},i=".get(): FocusedValue",c={unversionedId:"API/methods/get()",id:"API/methods/get()",title:".get()",description:"---",source:"@site/docs/API/methods/get().md",sourceDirName:"API/methods",slug:"/API/methods/get()",permalink:"/docs/API/methods/get()",draft:!1,editUrl:"https://github.com/TSOptics/react-optics-docs/edit/master/docs/API/methods/get().md",tags:[],version:"current",sidebarPosition:16,frontMatter:{title:".get()",sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:".sort()",permalink:"/docs/API/methods/sort()"},next:{title:".set()",permalink:"/docs/API/methods/set()"}},s={},p=[{value:"Example:",id:"example",level:3}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"get-focusedvalue"},".get(): FocusedValue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Optic<A, total, S>.get: () => A;\nOptic<A, partial, S>.get: () => A | undefined;\nOptic<A, mapped, S>.get: () => A[];\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"This method returns the value focused by the optic.",(0,o.kt)("br",{parentName:"p"}),"\n","Unlike ",(0,o.kt)("a",{parentName:"p",href:"../hooks/useOptic()"},(0,o.kt)("inlineCode",{parentName:"a"},"useOptic"))," you can use it to retrieve the focused value outside of React components and hooks."),(0,o.kt)("h3",{id:"example"},"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const onStates = createState([\n  { name: "Virginia", capital: "Richmond", inhabitants: 8_535_519 },\n  { name: "Illinois", capital: "Springfield", inhabitants: 12_812_508 },\n]);\n\nonStates[1].capital.get(); // \'Springfield\'\n\nonStates[0].name.get(); // \'Virginia\'\n\nonStates.map().inhabitants.get(); // [8_535_519, 12_812_508]\n')))}d.isMDXComponent=!0}}]);