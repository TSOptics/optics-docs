"use strict";(self.webpackChunkoptics_docs=self.webpackChunkoptics_docs||[]).push([[6934],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(r),d=o,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(f,s(s({ref:t},l),{},{components:r})):n.createElement(f,s({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[u]="string"==typeof e?e:o,s[1]=c;for(var p=2;p<a;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5724:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={title:".sort()",sidebar_position:15},s=".sort(compareFn): Optic",c={unversionedId:"API/methods/array/sort()",id:"API/methods/array/sort()",title:".sort()",description:"---",source:"@site/docs/API/methods/array/sort().md",sourceDirName:"API/methods/array",slug:"/API/methods/array/sort()",permalink:"/optics-docs/docs/API/methods/array/sort()",draft:!1,editUrl:"https://github.com/TSOptics/optics-docs/edit/master/docs/API/methods/array/sort().md",tags:[],version:"current",sidebarPosition:15,frontMatter:{title:".sort()",sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:".slice()",permalink:"/optics-docs/docs/API/methods/array/slice()"},next:{title:".max()",permalink:"/optics-docs/docs/API/methods/array/max()"}},i={},p=[{value:"Examples:",id:"examples",level:3}],l={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sortcomparefn-optic"},".sort(compareFn): Optic"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Optic<A, mapped>.sort: (compareFn?: (a: A, b: A) => number) => Optic<A, mapped>;\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"This method returns a new mapped optic focused on the elements of the original mapped optic but sorted according to a comparison function.",(0,o.kt)("br",{parentName:"p"}),"\n","The comparison function works the same way as in ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"},"Array.sort"),": it is expected to return a negative value if the first argument is less than the second argument, zero if they're equal, and a positive value otherwise. If omitted, the elements are sorted in ascending, ASCII character order."),(0,o.kt)("h3",{id:"examples"},"Examples:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Default comparison function")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onL\xe4nder = createState([\n  \"Hamburg\",\n  \"Bayern\",\n  \"Sachsen\",\n  \"Brandenburg\",\n  \"Saarland\",\n]);\n\nconst onSortedL\xe4nder = onL\xe4nder.map().sort();\n// onSortedL\xe4nder: Optic<string, mapped>\n\nconst [sortedL\xe4nder] = useOptic(onSortedL\xe4nder);\n// sortedL\xe4nder = ['Bayern', 'Brandenburg', 'Hamburg', 'Saarland', 'Sachsen']\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Custom comparison function")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const onNumbers = createState([90, 76, 456, 2, 39, -15, 1, -65]);\n// onNumbers: Optic<number[]>\n\nconst onSortedNumbers = onNumbers.map().sort((a, b) => a - b);\n// onSortedNumbers: Optic<number, mapped>\n\nconst [sortedNumbers] = useOptic(onSortedNumbers);\n// sortedNumbers = [-65, -15, 1, 2, 39, 76, 90, 456]\n")))}m.isMDXComponent=!0}}]);